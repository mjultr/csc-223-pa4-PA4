/*
 * This source file was generated by the Gradle 'init' task
 */
package pa4;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;

class BSTTest {

    @Test
    void testInsert() {
        BST bst = new BST();
        assertEquals("", bst.inOrder());
        bst.insert(5);
        assertEquals("5", bst.inOrder());
        bst.insert(3);
        assertEquals("35", bst.inOrder());
        bst.insert(7);
        assertEquals("357", bst.inOrder());

        // Test connections 
        assertEquals(5, bst.root.value);
        assertEquals(3, bst.root.left.value);
        assertEquals(7, bst.root.right.value);
    }

    @Test
    void testDelete() {
        BST bst = new BST();
        bst.insert(5);
        bst.insert(3);
        bst.insert(7);
        bst.delete(3);
        assertEquals("57", bst.inOrder());
        bst.delete(5);
        assertEquals("7", bst.inOrder());
        bst.delete(7);
        assertEquals("", bst.inOrder());

        // Test connections
        assertNull(bst.root);

        bst.insert(5);
        bst.insert(3);
        bst.insert(7);
        bst.insert(2);
        bst.insert(4);
        bst.insert(6);

        bst.delete(4);
        assertEquals("23567", bst.inOrder());
        assertEquals(3, bst.root.left.value);
        assertEquals(null, bst.root.left.right);
    }

    @Test
    void testSearch() {
        BST bst = new BST();
        bst.insert(20);
        assertEquals(true, bst.search(20));
        bst.insert(9);
        assertEquals(false, bst.search(3));
        bst.insert(7);    
        assertEquals(true, bst.search(7));
        assertEquals(true, bst.search(9));
        assertEquals(false, bst.search(0));
    }

    @Test
    void testUpdate() {
        BST bst = new BST();
        bst.insert(9);
        bst.insert(3);
        bst.insert(2);
        
        bst.update(3, 6);
        assertEquals("269", bst.inOrder());
        assertEquals(false,bst.search(3));
        assertEquals(true,bst.search(6));

        bst.update(5, 6);
        assertEquals("269", bst.inOrder());
        assertEquals(false, bst.search(5));
        assertEquals(true, bst.search(6));
    }
    @Test
    void testLowestCommonAncestor() {
        BST bst = new BST();
        bst.insert(5);
        bst.insert(3);
        bst.insert(7);
        bst.insert(2);
        bst.insert(4);
        bst.insert(6);
        bst.insert(8);

        assertEquals(3, bst.lowestCommonAncestor(2, 4).value);
        assertEquals(5, bst.lowestCommonAncestor(2, 6).value);
        assertEquals(3, bst.lowestCommonAncestor(2, 3).value);
    
}
